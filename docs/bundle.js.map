{"version":3,"file":"bundle.js","sources":["../src/main.js"],"sourcesContent":["let canvas, gl;\r\nlet vertices, colors, indices = undefined;\r\n\r\ndocument.body.onload = _ => {\r\n    let [vertices, indicesLines, indicesTris] = createKidneySurface();\r\n    let aColors = [];\r\n    for (let i = 0; i < indicesTris.length / 2; i += 1) {\r\n        aColors = [...aColors, .25, 0, 0, 1, 0, 0, 1, 1];\r\n    }\r\n    \r\n    let colors = new Float32Array(aColors);\r\n    draw('#canvas1', 0.2, vertices, indicesLines, indicesTris, colors);\r\n\r\n    [vertices, indicesLines, indicesTris] = createWellenkugel();\r\n    draw('#canvas2', 0.05, vertices, indicesLines, indicesTris);\r\n\r\n    [vertices, indicesLines, indicesTris, colors] = createMyShape();\r\n    draw('#canvas3', 0.2, vertices, indicesLines, indicesTris);\r\n};\r\n\r\nlet createWellenkugel = () => {\r\n    let n = 100;\r\n    let m = 100;\r\n    // Positions.\r\n    let vertices = new Float32Array(3 * (n + 1) * (m + 1));\r\n    // Index data.\r\n    let indicesLines = new Uint16Array(2 * 2 * n * m);\r\n    let indicesTris = new Uint16Array(3 * 2 * n * m);\r\n\r\n    let du = 14.5 / n;\r\n    let dv = 2 * Math.PI / m;\r\n\r\n    // Counter for entries in index array.\r\n    let iLines = 0;\r\n    let iTris = 0;\r\n\r\n    // Loop angle u.\r\n    for (let i = 0, u = 0; i <= n; i++, u += du) {\r\n        // Loop height v.\r\n        for (let j = 0, v = 0; j <= m; j++, v += dv) {\r\n\r\n            let iVertex = i * (m + 1) + j;\r\n\r\n            let x, y, z = 0;\r\n            x = u * Math.cos(Math.cos(u)) * Math.cos(v);\r\n            z = u * Math.cos(Math.cos(u)) * Math.sin(v);\r\n            y = u * Math.sin(Math.cos(u));\r\n\r\n            // Set vertex positions.\r\n            vertices[iVertex * 3] = x;\r\n            vertices[iVertex * 3 + 1] = y;\r\n            vertices[iVertex * 3 + 2] = z;\r\n\r\n            // Set index.\r\n            // Line on beam.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - 1;\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n            // Line on ring.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - (m + 1);\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n\r\n            // Set index.\r\n            // Two Triangles.\r\n            if (j > 0 && i > 0) {\r\n                indicesTris[iTris++] = iVertex;\r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n                //                            \r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1) - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n            }\r\n        }\r\n    }\r\n    return [vertices, indicesLines, indicesTris];\r\n}\r\n\r\nlet createKidneySurface = () => {\r\n    let n = 20;\r\n    let m = 20;\r\n    // Positions.\r\n    let vertices = new Float32Array(3 * (n + 1) * (m + 1));\r\n    // Index data.\r\n    let indicesLines = new Uint16Array(2 * 2 * n * m);\r\n    let indicesTris = new Uint16Array(3 * 2 * n * m);\r\n\r\n    let du = 2 * Math.PI / n;\r\n    let dv = Math.PI / m;\r\n\r\n    // Counter for entries in index array.\r\n    let iLines = 0;\r\n    let iTris = 0;\r\n\r\n    // Loop angle u.\r\n    for (let i = 0, u = 0; i <= n; i++, u += du) {\r\n        // Loop height v.\r\n        for (let j = 0, v = -Math.PI / 2; j <= m; j++, v += dv) {\r\n\r\n            let iVertex = i * (m + 1) + j;\r\n\r\n            let x, y, z = 0;\r\n            x = Math.cos(u) * (3 * Math.cos(v) - Math.cos(3 * v));\r\n            z = Math.sin(u) * (3 * Math.cos(v) - Math.cos(3 * v));\r\n            y = 3 * Math.sin(v) - Math.sin(3 * v);\r\n\r\n            // Set vertex positions.\r\n            vertices[iVertex * 3] = x;\r\n            vertices[iVertex * 3 + 1] = y;\r\n            vertices[iVertex * 3 + 2] = z;\r\n\r\n            // Set index.\r\n            // Line on beam.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - 1;\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n            // Line on ring.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - (m + 1);\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n\r\n            // Set index.\r\n            // Two Triangles.\r\n            if (j > 0 && i > 0) {\r\n                indicesTris[iTris++] = iVertex;\r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n                //                            \r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1) - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n            }\r\n        }\r\n    }\r\n    return [vertices, indicesLines, indicesTris];\r\n}\r\n\r\nlet createMyShape = () => {\r\n    let n = 20;\r\n    let m = 20;\r\n    // Positions.\r\n    let vertices = new Float32Array(3 * (n + 1) * (m + 1));\r\n    // Index data.\r\n    let indicesLines = new Uint16Array(2 * 2 * n * m);\r\n    let indicesTris = new Uint16Array(3 * 2 * n * m);\r\n\r\n    let du = 2 * Math.PI / n;\r\n    let dv = Math.PI / m;\r\n\r\n    // Counter for entries in index array.\r\n    let iLines = 0;\r\n    let iTris = 0;\r\n\r\n    // Loop angle u.\r\n    for (let i = 0, u = 0; i <= n; i++, u += du) {\r\n        // Loop height v.\r\n        for (let j = 0, v = -Math.PI / 2; j <= m; j++, v += dv) {\r\n\r\n            let iVertex = i * (m + 1) + j;\r\n\r\n            let x, y, z = 0;\r\n            x = Math.cos(u) * (1 * Math.cos(v) - Math.cos(6 * v));\r\n            z = Math.sin(u) * (1 * Math.cos(v) - Math.cos(3 * v));\r\n            y = 3 * Math.sin(v) - Math.sin(3 * v);\r\n\r\n            // Set vertex positions.\r\n            vertices[iVertex * 3] = x;\r\n            vertices[iVertex * 3 + 1] = y;\r\n            vertices[iVertex * 3 + 2] = z;\r\n\r\n            // Set index.\r\n            // Line on beam.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - 1;\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n            // Line on ring.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - (m + 1);\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n\r\n            // Set index.\r\n            // Two Triangles.\r\n            if (j > 0 && i > 0) {\r\n                indicesTris[iTris++] = iVertex;\r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n                //                            \r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1) - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n            }\r\n        }\r\n    }\r\n    return [vertices, indicesLines, indicesTris];\r\n}\r\n\r\nfunction draw(sId, scale = 1, vertices, indicesLines, indicesTris, colors) {\r\n    let canvas = document.querySelector(sId);\r\n    let gl = canvas.getContext('webgl');\r\n\r\n    // Pipeline setup\r\n    gl.clearColor(.25, .35, .45, 1);\r\n    // Backface culling.\r\n    gl.frontFace(gl.CCW);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    // Depth(Z)-Buffer.\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    // Polygon offset of rastered Fragments.\r\n    gl.enable(gl.POLYGON_OFFSET_FILL);\r\n    gl.polygonOffset(0.5, 0);\r\n\r\n    // Compile vertex shader. \r\n    let vsSource = '' +\r\n        'attribute vec3 pos;' +\r\n        'attribute vec4 col;' +\r\n        'varying vec4 color;' +\r\n        'void main(){' + 'color = col;' +\r\n        `gl_Position = vec4(pos * ${scale} , 1);` +\r\n        '}';\r\n\r\n    let vs = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vs, vsSource);\r\n    gl.compileShader(vs);\r\n\r\n    // Compile fragment shader.\r\n    let fsSouce = 'precision mediump float;' +\r\n        'varying vec4 color;' +\r\n        'void main() {' +\r\n        'gl_FragColor = color;' +\r\n        '}';\r\n    let fs = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fs, fsSouce);\r\n    gl.compileShader(fs);\r\n\r\n    // Link shader together into a program.\r\n    let prog = gl.createProgram();\r\n    gl.attachShader(prog, vs);\r\n    gl.attachShader(prog, fs);\r\n    gl.bindAttribLocation(prog, 0, \"pos\");\r\n    gl.linkProgram(prog);\r\n    gl.useProgram(prog);\r\n\r\n    // Setup position vertex buffer object.\r\n    let vboPos = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vboPos);\r\n    gl.bufferData(gl.ARRAY_BUFFER,\r\n        vertices, gl.STATIC_DRAW);\r\n    // Bind vertex buffer to attribute variable.\r\n    let posAttrib = gl.getAttribLocation(prog, 'pos');\r\n    gl.vertexAttribPointer(posAttrib, 3, gl.FLOAT,\r\n        false, 0, 0);\r\n    gl.enableVertexAttribArray(posAttrib);\r\n\r\n    // Setup lines index buffer object.\r\n    let iboLines = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, iboLines);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,\r\n        indicesLines, gl.STATIC_DRAW);\r\n    iboLines.numberOfElements = indicesLines.length;\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n    // Setup tris index buffer object.\r\n    let iboTris = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, iboTris);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,\r\n        indicesTris, gl.STATIC_DRAW);\r\n    iboTris.numberOfElements = indicesTris.length;\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n\r\n    let colAttrib = gl.getAttribLocation(prog, 'col');\r\n    if (colors) {\r\n        // Setup color vertex buffer object.\r\n        let vboCol = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, vboCol);\r\n        gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\r\n        // Bind vertex buffer to attribute variable.\r\n        gl.vertexAttribPointer(colAttrib, 4, gl.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(colAttrib);\r\n    }\r\n\r\n    // Clear framebuffer and render primitives.\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Setup rendering tris.\r\n    if (!colors) {\r\n        gl.vertexAttrib4f(colAttrib, .5, .5, 1, 1);\r\n    }\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, iboTris);\r\n    gl.drawElements(gl.TRIANGLES,\r\n        iboTris.numberOfElements, gl.UNSIGNED_SHORT, 0);\r\n\r\n    // Setup rendering lines.\r\n    if (!colors) {\r\n        gl.vertexAttrib4f(colAttrib, 1, 1, 1, 1);\r\n    }\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, iboLines);\r\n    gl.drawElements(gl.LINES,\r\n        iboLines.numberOfElements, gl.UNSIGNED_SHORT, 0);\r\n};"],"names":["document","body","onload","_","vertices","indicesLines","indicesTris","createKidneySurface","aColors","i","length","colors","Float32Array","draw","createWellenkugel","createMyShape","n","m","Uint16Array","dv","Math","PI","iLines","iTris","u","j","v","x","y","iVertex","z","cos","sin","du","sId","scale","gl","querySelector","getContext","clearColor","frontFace","CCW","enable","CULL_FACE","cullFace","BACK","DEPTH_TEST","depthFunc","LEQUAL","POLYGON_OFFSET_FILL","polygonOffset","vsSource","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","fs","FRAGMENT_SHADER","prog","createProgram","attachShader","bindAttribLocation","linkProgram","useProgram","vboPos","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","posAttrib","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","iboLines","ELEMENT_ARRAY_BUFFER","numberOfElements","iboTris","colAttrib","vboCol","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertexAttrib4f","drawElements","TRIANGLES","UNSIGNED_SHORT","LINES"],"mappings":"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"}